import { Type } from '@sinclair/typebox';
import { TypeCompiler } from '@sinclair/typebox/compiler';

import { DBTable, DEFAULT_COLUMNS, DB, convertToDate } from '@/services/db';
import { usersTable } from '@/services/session/user';
import { TableDefaults } from '@/sky-shared/db';

export enum PlanEventStatus {
  TODO = 0,
  DONE = 1,
  FAILED = 2,
  SKIPPED = 3,
}
export type PlanEvent = TableDefaults & {
  title: string;
  start: number; // unix minutes
  duration: number; // Minutes
  userId: number;
  status: PlanEventStatus;
  repeat?: string; // cron or interval
  description?: string;
  parentId?: number;
};
export const T = TypeCompiler.Compile(
  Type.Object({
    title: Type.String({
      minLength: 1,
      maxLength: 255,
    }),
    description: Type.Optional(
      Type.String({
        minLength: 1,
        maxLength: 255,
      }),
    ),
    start: Type.Number({
      minimum: 0,
      maximum: Number.MAX_SAFE_INTEGER,
    }), // Minute in day
    duration: Type.Number({
      minimum: 0,
      maximum: Number.MAX_SAFE_INTEGER,
    }), // Minutes
    status: Type.Enum({
      TODO: 0,
      DONE: 1,
      FAILED: 2,
      SKIPPED: 3,
    }),
    repeat: Type.Optional(Type.String()), // cors
    parentId: Type.Optional(
      Type.Number({
        minimum: 0,
        maximum: Number.MAX_SAFE_INTEGER,
      }),
    ),
  }),
);

export class PlanEventsTable extends DBTable<PlanEvent> {
  public constructor(table: string) {
    super(table, {
      ...DEFAULT_COLUMNS,
      title: {
        type: 'TEXT',
        required: true,
      },
      start: {
        type: 'INTEGER',
        required: true,
      },
      duration: {
        type: 'INTEGER',
        required: true,
      },
      userId: {
        type: 'INTEGER',
        required: true,
        ref: {
          table: 'users',
          column: 'id',
          onDelete: 'CASCADE',
          onUpdate: 'CASCADE',
        },
      },
      status: {
        type: 'INTEGER',
        required: true,
      },
      repeat: {
        type: 'TEXT',
      },
      description: {
        type: 'TEXT',
      },
      parentId: {
        type: 'INTEGER',
        ref: {
          table: table,
          column: 'id',
          onDelete: 'CASCADE',
          onUpdate: 'CASCADE',
        },
      },
    });
  }
  queries = {};

  getByIdAndUser(id: number, userId: number) {
    return this.convertFrom(this.queries.getByIdAndUser.get(id, userId));
  }

  getUpdated(userId: number, updated: number) {
    return this.queries.getUpdated.values(userId, convertToDate(new Date(updated * 1000))!) as [number, number][];
  }
}
export const planEventsTable = new PlanEventsTable('plan_events');

// setTimeout(() => {
//   console.log(1);
//   // planEventsTable.create({
//   //   start: ~~(Date.now() / 60000) - 60,
//   //   duration: 30,
//   //   status: PlanEventStatus.DEFAULT,
//   //   title: 'Work out',
//   //   userId: 1,
//   //   description: 'test\ndesc',
//   //   repeat: 1440,
//   // });
//   // planEventsTable.create({
//   //   start: ~~(Date.now() / 60000) + 1440,
//   //   duration: 30,
//   //   status: PlanEventStatus.DEFAULT,
//   //   title: 'Work out 2',
//   //   userId: 1,
//   //   repeat: 1440,
//   //   parentId: 1,
//   // });
//   // planEventsTable.create({
//   //   start: ~~(Date.now() / 60000) - 1440,
//   //   duration: 30,
//   //   status: PlanEventStatus.DEFAULT,
//   //   title: 'test',
//   //   userId: 1,
//   // });
//   // planEventsTable.create({
//   //   start: ~~(Date.now() / 60000) + 1440,
//   //   duration: 30,
//   //   status: PlanEventStatus.DEFAULT,
//   //   title: 'test2',
//   //   userId: 1,
//   // });
//   console.log(planEventsTable.getActive(1, 0, Number.MAX_SAFE_INTEGER));
// });
